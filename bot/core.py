import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from pydub import AudioSegment
import ffmpeg
from google.cloud import speech

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class VoiceToTextBot:
    def __init__(self, token):
        self.token = token
        self.supported_formats = {
            'audio/mp3': 'mp3',
            'audio/wav': 'wav',
            'audio/ogg': 'ogg',
            'audio/webm': 'webm',
            'video/mp4': 'mp4',
            'video/webm': 'webm'
        }
        self.max_file_size = 20 * 1024 * 1024  # 20MB
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Google Speech-to-Text
        try:
            self.speech_client = speech.SpeechClient()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Speech API: {e}")
            raise RuntimeError(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Google Speech API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "1. –§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Google Cloud (—É–∫–∞–∑–∞–Ω –≤ GOOGLE_APPLICATION_CREDENTIALS)\n"
                "2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Speech-to-Text –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ Google Cloud\n"
                "3. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"
            )
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç."
        )
    
    async def handle_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            file = await self._validate_file(update)
            if not file:
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_msg = await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞: [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë] 0%")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
            await self._update_progress(progress_msg, 20)
            audio_path = await self._convert_to_wav(file)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            await self._update_progress(progress_msg, 50)
            text = await self._recognize_speech(audio_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._update_progress(progress_msg, 90)
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:\n\n{text}")
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            await self._update_progress(progress_msg, 100, done=True)
            
        except Exception as e:
            logger.error(f"Error processing media: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _validate_file(self, update: Update):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."""
        file = None
        
        if update.message.voice:
            file = await update.message.voice.get_file()
        elif update.message.video:
            file = await update.message.video.get_file()
        elif update.message.audio:
            file = await update.message.audio.get_file()
        elif update.message.document:
            file = await update.message.document.get_file()
        
        if not file:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return None
        
        if file.file_size > self.max_file_size:
            await update.message.reply_text(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.max_file_size//1024//1024}MB")
            return None
        
        return file
    
    async def _convert_to_wav(self, file):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –≤ WAV —Ñ–æ—Ä–º–∞—Ç."""
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_path = f"temp_{file.file_id}.{self.supported_formats.get(file.mime_type, 'mp3')}"
        await file.download_to_drive(file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        wav_path = f"converted_{file.file_id}.wav"
        
        if file.mime_type.startswith('video/'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
            (
                ffmpeg
                .input(file_path)
                .output(wav_path, acodec='pcm_s16le', ac=1, ar='16k')
                .run(quiet=True)
            )
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio = AudioSegment.from_file(file_path)
            audio.export(wav_path, format="wav")
        
        return wav_path
    
    async def _recognize_speech(self, audio_path):
        """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞."""
        with open(audio_path, "rb") as audio_file:
            content = audio_file.read()
        
        audio = speech.RecognitionAudio(content=content)
        config = speech.RecognitionConfig(
            encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
            sample_rate_hertz=16000,
            language_code="ru-RU",
        )
        
        response = self.speech_client.recognize(config=config, audio=audio)
        return "\n".join([result.alternatives[0].transcript for result in response.results])
    
    async def _update_progress(self, progress_msg, percent, done=False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä."""
        progress = int(percent / 10)
        bar = "üü©" * progress + "‚¨ú" * (10 - progress)
        text = f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {bar} {percent}%"
        
        if done:
            text = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        
        await progress_msg.edit_text(text)

def main():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    from config.settings import Config
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN") or Config.TELEGRAM_BOT_TOKEN
    if not bot_token:
        print("–û—à–∏–±–∫–∞: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
        print("–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª –∏–ª–∏ –≤ config/settings.py")
        print("–ü—Ä–∏–º–µ—Ä .env —Ñ–∞–π–ª–∞ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ .env.example")
        raise ValueError("–ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
    
    bot = VoiceToTextBot(bot_token)
    
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(bot_token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(MessageHandler(
        filters.VOICE | filters.VIDEO | filters.AUDIO | filters.Document.ALL,
        bot.handle_media
    ))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
